cor(temp[, 61],
temp[, indices])
)
j <- j + 1
}
i <- i + 1
}
n.d.a <- data.frame(matrix(ncol = length(indices) + 1, nrow = 0))
colnames(n.d.a) <- c("day / channel", colnames(news.data[, indices]))
i <- 1
j <- 1
for (day in c(32:38)) {
j <- 1
for (channel in c(14:19)) {
temp <- news.data[news.data[, channel] == 1 & news.data[, day] == 0,]
n.d.a[(i - 1) * 6 + j,] <- c(paste(i, j,
sep="/"),
cor(temp[, 61],
temp[, indices])
)
j <- j + 1
}
i <- i + 1
}
n.d.a <- data.frame(matrix(ncol = length(indices) + 1, nrow = 0))
colnames(n.d.a) <- c("day / channel", colnames(news.data[, indices]))
i <- 1
j <- 1
for (day in c(32:38)) {
j <- 1
for (channel in c(14:19)) {
temp <- news.data[news.data[, channel] == 1 & news.data[, day] == 0,]
n.d.a[(i - 1) * 6 + j,] <- c(paste(i, channel,
sep="/"),
cor(temp[, 61],
temp[, indices])
)
j <- j + 1
}
i <- i + 1
}
result <- apply(n.d.a, 2, function(column) column > 0.1)
temp <- n.d.a[, result]
temp2 <- n.d.a[, result]
View(result)
gym.data <- read.table("data_gym.csv",
header = TRUE,
sep = ",")
View(gym.data)
cor(gym.data)
cor(gym.data[, c(1, 3, 7, 8)])
gym.data[, 2] <- mapply(function(timestamp) timestamp / 3600, gym.datap[, 2])
gym.data[, 2] <- mapply(function(timestamp) timestamp / 3600, gym.data[, 2])
cor(gym.data)
options(scipen=5)
cor(gym.data)
cor(gym.data[, 1], gym.data[, 2, 3, 7, 8])
cor(gym.data[, 1], gym.data[, c(2, 3, 7, 8)])
indices.train <- c(2375:7643, 9840:18466, 20071:26066)
indices.test <- c(1:2374, 7644:9839, 18467:20070)
length(indicies.test) + length(indicies.train)
length(indices.test) + length(indices.train)
gym.data.train <- gym.data.train[indices.train,]
gym.data.train <- gym.data[indices.train,]
crowd.mul.regression <- lm(number_people ~ timestamp +
day_of_week +
tempearture,
gym.data.train)
crowd.mul.regression <- lm(number_people ~ timestamp +
day_of_week +
temperature,
gym.data.train)
summary(crowd.mul.regression)
gym.predict <- predict(gym.mul.regression, gym.data.test)
gym.true <- gym.data.test[,1]
plot(gym.predict[1:20], gym.true[1:20], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
gym.predict <- predict(gym.mul.regression, gym.data.test)
crowd.predict <- predict(crowd.mul.regression, gym.data.test)
gym.data.test <- gym.data[indices.test,]
crowd.predict <- predict(crowd.mul.regression, gym.data.test)
crowd.true <- gym.data.test[,1]
plot(crowd.predict[1:20], crowd.true[1:20], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(crowd.predict[1:100], crowd.true[1:100], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(crowd.predict, crowd.true, col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(crowd.predict[100:270], crowd.true[100:270], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
crowd.mul.regression <- lm(number_people ~ timestamp +
day_of_week +
temperature +
is_start_of_semester,
gym.data.train)
summary(crowd.mul.regression)
crowd.predict <- predict(crowd.mul.regression, gym.data.test)
crowd.true <- gym.data.test[,1]
plot(crowd.predict[100:270], crowd.true[100:270], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(crowd.predict[70:370], crowd.true[70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
matrix.gym <- matrix(ncol = 8)
matrix.gym <- matrix(nrow = 0, ncol = 8)
matrix.gym <- read.table("data_gym.csv",
header = TRUE,
sep = ",")
matrix.gym[, 2] <- mapply(function(timestamp) timestamp / 3600, matrix.gym[, 2])
f <- 7
X.gym <- matrix.gym[, 1:7]
X.gym <- matrix.gym[, 2:]
X.gym <- matrix.gym[, 2:8]
cor(gym.data[, 1], gym.data[, 2:8)])
cor(gym.data[, 1], gym.data[, 2:8])
crowd.mul.regression <- lm(number_people ~ timestamp +
is_weekend +
temperature +
is_start_of_semester,
gym.data.train)
summary(crowd.mul.regression)
crowd.predict <- predict(crowd.mul.regression, gym.data.test)
crowd.true <- gym.data.test[,1]
plot(crowd.predict[70:370], crowd.true[70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
t <- runif(26066, 1:1)
t <- vector(runif(26066, 1:1))
t <- vector(runif(26066, 1:1), mode = 'numeric')
t <- vector(26066, mode = 'numeric')
t <- runif(26066, 1:1)
crowd.mul.regression
X1.gym <- matrix(nrow = 0, ncol = 8)
X1.gym <- matrix(nrow = 0, ncol = f + 1)
for (k in 1:f + 1){
if k == 1{
X1[, k] <- runif(n, 1:1)
}
else{
X1[, k] <- X[k]
}
}
X1.gym <- matrix(nrow = 0, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1[, k] <- runif(n, 1:1)
}
else {
X1[, k] <- X[k]
}
}
X1.gym <- matrix(nrow = 0, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[k]
}
}
X1.gym <- matrix(nrow = 0, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
View(X1.gym)
X1.gym <- matrix(nrow = n, ncol = f + 1)
n <- 26066
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
View(X1.gym)
X1.gym[, 1] <- runif(n, 1:1)
View(X1.gym)
X1.gym <- matrix(nrow = n, ncol = f + 1)
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:f + 1) {
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
View(X1.gym)
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:f + 1) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in c(1:f + 1) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in c(1:f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 0:f + 1) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
9840:18466
View(X1.gym)
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 0:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
edit(X1)
edit(X1.gym)
T <- t(X1.gym) %*% X1.gym
library(MASS)
T.inverse <- ginv(T)
View(`T`)
th <- T.inverse%*%t(X1.gym)%*%Y.gym
Y.gym <- matrix.gym[, 1]
th <- T.inverse%*%t(X1.gym)%*%Y.gym
th <- T.inverse%*%t(X1.gym)%*%Y.gym[, 1]
th <- (T.inverse%*%t(X1.gym)%*%Y.gym)[, 1]
matrix.gym <- matrix.gym[indices.train,]
X.gym <- matrix.gym[, 2:f + 1]
Y.gym <- matrix.gym[, 1]
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
T <- t(X1.gym) %*% X1.gym
library(MASS)
T.inverse <- ginv(T)
th <- (T.inverse%*%t(X1.gym)%*%Y.gym)[, 1]
matrix.gym <- matrix(nrow = 0, ncol = f + 1)
matrix.gym <- read.table("data_gym.csv",
header = TRUE,
sep = ",")
matrix.gym[, 2] <- mapply(function(timestamp) timestamp / 3600, matrix.gym[, 2])
matrix.gym.train <- matrix.gym[indices.train,]
n <- length(matrix.gym.train[,1])
X.gym <- matrix.gym.train[, 2:f + 1]
Y.gym <- matrix.gym.train[, 1]
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
T <- t(X1.gym) %*% X1.gym
library(MASS)
T.inverse <- ginv(T)
th <- (T.inverse%*%t(X1.gym)%*%Y.gym)[, 1]
X.gym <- matrix.gym.train[, 2:(f + 1)]
Y.gym <- matrix.gym.train[, 1]
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
T <- t(X1.gym) %*% X1.gym
library(MASS)
T.inverse <- ginv(T)
th <- (T.inverse%*%t(X1.gym)%*%Y.gym)[, 1]
prognosis <- th%*%t(matrix.gym[indices.test,][,2:(f + 1)])
prognosis <- th%*%t(matrix.gym[indices.test, 2:(f + 1)])
f <- 7
matrix.gym <- matrix(nrow = 0, ncol = f + 1)
matrix.gym <- read.table("data_gym.csv",
header = TRUE,
sep = ",")
matrix.gym[, 2] <- mapply(function(timestamp) timestamp / 3600, matrix.gym[, 2])
n <- length(matrix.gym[,1])
# первый столбец отвечает за переменную отклика, возьмем только факторные переменные
X.gym <- matrix.gym[, 2:(f + 1)]
Y.gym <- matrix.gym[, 1]
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
prognosis <- th%*%t(X1.gym[indices.test,])
plot(prognosis[70:370], Y[indices.test,][70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(prognosis[70:370], Y.gym[indices.test,][70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(prognosis[70:370], Y.gym[indices.test][70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(prognosis[70:370], Y.gym[indices.test][70:370], col="#B8B42D", type="l",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
plot(prognosis[70:370], Y.gym[indices.test][70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
cor(gym.data)
crowd.mul.regression <- lm(number_people ~ timestamp +
is_weekend +
apparent_temperature +
is_start_of_semester,
gym.data.train)
summary(crowd.mul.regression)
crowd.predict <- predict(crowd.mul.regression, gym.data.test)
crowd.true <- gym.data.test[,1]
plot(crowd.predict[70:370], crowd.true[70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
f <- 4
matrix.gym <- matrix(nrow = 0, ncol = f + 1)
emp <- read.table("data_gym.csv",
header = TRUE,
sep = ",")
temp[, 2] <- mapply(function(timestamp) timestamp / 3600, matrix.gym[, 2])
matrix.gym <- temp[, c(1, 2, 4, 6, 8)]
n <- length(matrix.gym[,1])
X.gym <- matrix.gym[, 2:(f + 1)]
Y.gym <- matrix.gym[, 1]
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym.train <- X1.gym[indices.train,]
matrix.gym <- matrix(nrow = 0, ncol = f + 1)
temp <- read.table("data_gym.csv",
header = TRUE,
sep = ",")
temp[, 2] <- mapply(function(timestamp) timestamp / 3600, temp[, 2])
matrix.gym <- temp[, c(1, 2, 4, 6, 8)]
n <- length(matrix.gym[,1])
X.gym <- matrix.gym[, 2:(f + 1)]
Y.gym <- matrix.gym[, 1]
X1.gym <- matrix(nrow = n, ncol = f + 1)
for (k in 1:(f + 1)) {
print(k)
if (k == 1) {
X1.gym[, k] <- runif(n, 1:1)
}
else {
X1.gym[, k] <- X.gym[, k - 1]
}
}
X1.gym.train <- X1.gym[indices.train,]
T <- t(X1.gym.train) %*% X1.gym.train
library(MASS)
T.inverse <- ginv(T)
th <- (T.inverse%*%t(X1.gym.train)%*%Y.gym[indices.train,])[, 1]
prognosis <- th%*%t(X1.gym[indices.test,])
th <- (T.inverse%*%t(X1.gym.train)%*%Y.gym[indices.train,])[, 1]
th <- (T.inverse%*%t(X1.gym.train)%*%Y.gym[indices.train])[, 1]
prognosis <- th%*%t(X1.gym[indices.test,])
plot(prognosis[70:370], Y.gym[indices.test][70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
cor(gym.data)
View(cor(gym.data))
write.csv((cor(gym.data), file = "gym_data_corr.csv")
write.csv(cor(gym.data), file = "gym_data_corr.csv")
th
crowd.mul.regression
summary(crowd.mul.regression)
length(indices.test)
length(indices.train)
plot(crowd.predict[70:370], crowd.true[70:370], col="#B8B42D", type="p",
pch=20,
xlab="Предсказанные значения",
ylab="Настоящие значения")
crowd.mul.regression <- lm(number_people ~ timestamp +
is_weekend +
apparent_temperature + is_holiday +
is_start_of_semester,
gym.data.train)
summary(crowd.mul.regression)
